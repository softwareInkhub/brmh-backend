openapi: 3.0.0
info:
  title: Unified API
  version: 1.0.0
  description: Unified API for handling schemas, namespaces, and API execution
servers:
  - url: /unified

paths:
  # Schema Operations
  /schema/generate:
    post:
      operationId: generateSchema
      summary: Generate schema from data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["data"]
              properties:
                data:
                  type: object
                  description: Data to generate schema from
      responses:
        '200':
          description: Schema generated successfully
          content:
            application/json:
              schema:
                type: object
                required: ["schema", "isArray", "originalType"]
                properties:
                  schema:
                    type: object
                  isArray:
                    type: boolean
                  originalType:
                    type: string

  /schema/validate:
    post:
      operationId: validateSchema
      summary: Validate schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["schema"]  # Only require schema
              properties:
                schema:
                  type: object
                data:
                  type: object
                  nullable: true
      responses:
        '200':
          description: Schema validation result
          content:
            application/json:
              schema:
                type: object
                required: ["valid"]
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                        instancePath:
                          type: string

  /schema:
    post:
      operationId: saveSchema
      summary: Save schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["schemaName", "schema"]
              properties:
                methodId:
                  type: string
                  nullable: true
                schemaName:
                  type: string
                methodName:
                  type: string
                  nullable: true
                namespaceId:
                  type: string
                  nullable: true
                schemaType:
                  type: string
                  nullable: true
                schema:
                  type: object
                isArray:
                  type: boolean
                  default: false
                originalType:
                  type: string
                  nullable: true
                url:
                  type: string
                  default: ""
      responses:
        '200':
          description: Schema saved successfully
          content:
            application/json:
              schema:
                type: object
                required: ["schemaId"]
                properties:
                  schemaId:
                    type: string

    get:
      operationId: listSchemas
      summary: List all schemas
      responses:
        '200':
          description: List of schemas
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /schema/selection:
    get:
      operationId: getSchemasForSelection
      summary: Get schemas for child schema selection
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search term to filter schemas by name or method name
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Maximum number of schemas to return
        - name: schemaType
          in: query
          schema:
            type: string
          description: Filter by schema type (matches stored schemaType on schema)
      responses:
        '200':
          description: List of schemas for selection
          content:
            application/json:
              schema:
                type: object
                properties:
                  schemas:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        schemaName:
                          type: string
                        methodName:
                          type: string
                          nullable: true
                        description:
                          type: string
                  total:
                    type: integer
                  limit:
                    type: integer

  /schema/{schemaId}:
    parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getSchema
      summary: Get schema by ID
      responses:
        '200':
          description: Schema retrieved successfully
          content:
            application/json:
              schema:
                type: object

    put:
      operationId: updateSchema
      summary: Update schema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Schema updated successfully
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteSchema
      summary: Delete schema
      responses:
        '204':
          description: Schema deleted successfully

  /schema/{schemaId}/resolved:
    parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          type: string
      - name: resolveReferences
        in: query
        schema:
          type: boolean
          default: true
        description: Whether to resolve schema references
    get:
      operationId: getSchemaWithReferences
      summary: Get schema by ID with resolved references
      responses:
        '200':
          description: Schema retrieved successfully with resolved references
          content:
            application/json:
              schema:
                type: object

  # Table Operations
  /schema/table:
    post:
      operationId: createSchemasTable
      summary: Create schema table for a specific account and method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [schemaId, accountId, methodName]
              properties:
                schemaId:
                  type: string
                accountId:
                  type: string
                methodName:
                  type: string
                tableName:
                  type: string
                  description: Optional. If not provided, will be generated as namespace-name+account-name+method-name
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tableName:
                    type: string
                  schemaId:
                    type: string
                  accountId:
                    type: string
                  methodName:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /schema/table-meta:
    get:
      operationId: listSchemaTableMeta
      summary: List schema table metadata
      responses:
        '200':
          description: List of table metadata
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /schema/table-meta/{metaId}:
    parameters:
      - name: metaId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getSchemaTableMeta
      summary: Get schema table metadata
      responses:
        '200':
          description: Table metadata retrieved successfully
          content:
            application/json:
              schema:
                type: object

  /schema/table-meta/check/{metaId}:
    parameters:
      - name: metaId
        in: path
        required: true
        schema:
          type: string
    post:
      operationId: checkAndUpdateTableStatus
      summary: Check and update table status
      responses:
        '200':
          description: Table status checked and updated
          content:
            application/json:
              schema:
                type: object
                required: ["id", "tableName", "status"]
                properties:
                  id:
                    type: string
                  tableName:
                    type: string
                  status:
                    type: string

  /schema/table/{tableName}/items:
    parameters:
      - name: tableName
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getTableItems
      summary: Get table items
      responses:
        '200':
          description: Table items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

    post:
      operationId: createTableItem
      summary: Create a new item in the table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["item"]
              properties:
                item:
                  type: object
                  description: The item to create
                requestDetails:
                  type: object
                  description: Details of the API request that generated this data
                  properties:
                    method:
                      type: string
                    url:
                      type: string
                    queryParams:
                      type: object
                    headers:
                      type: object
                    body:
                      type: object
                status:
                  type: integer
                  description: HTTP status code of the API response
                itemIndex:
                  type: integer
                  description: Index of the item in the batch
                totalItems:
                  type: integer
                  description: Total number of items in the batch
                originalId:
                  type: string
                  description: Original ID of the item from the API
      responses:
        '200':
          description: Item created successfully
          content:
            application/json:
              schema:
                type: object
                required: ["success"]
                properties:
                  success:
                    type: boolean
                  itemId:
                    type: string
                    description: ID of the created item

  # API Execution
  /execute:
    post:
      operationId: executeNamespaceRequest
      summary: Execute namespace request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["method", "url"]
              properties:
                method:
                  type: string
                url:
                  type: string
                queryParams:
                  type: object
                headers:
                  type: object
                body:
                  type: object
      responses:
        '200':
          description: Request executed successfully
          content:
            application/json:
              schema:
                type: object

  /execute/paginated:
    post:
      operationId: executeNamespacePaginatedRequest
      summary: Execute paginated namespace request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["method", "url"]
              properties:
                method:
                  type: string
                url:
                  type: string
                maxIterations:
                  type: integer
                paginationType:
                  type: string
                queryParams:
                  type: object
                headers:
                  type: object
                body:
                  type: object
      responses:
        '200':
          description: Paginated request executed successfully
          content:
            application/json:
              schema:
                type: object
                required: ["status", "metadata", "data"]
                properties:
                  status:
                    type: integer
                  metadata:
                    type: object
                  data:
                    type: array

  # Namespace Operations
  /namespaces:
    get:
      operationId: getNamespaces
      summary: Get all namespaces
      responses:
        '200':
          description: List of namespaces
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

    post:
      operationId: createNamespace
      summary: Create namespace
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: ["namespace-name", "namespace-url"]
              properties:
                namespace-name:
                  type: string
                namespace-url:
                  type: string
                icon:
                  type: string
                  format: binary
                  description: Icon image file (optional)
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Namespace created successfully
          content:
            application/json:
              schema:
                type: object

  /namespaces/{namespaceId}:
    parameters:
      - name: namespaceId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getNamespaceById
      summary: Get namespace by ID
      responses:
        '200':
          description: Namespace retrieved successfully
          content:
            application/json:
              schema:
                type: object

    put:
      operationId: updateNamespace
      summary: Update namespace
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: ["namespace-name", "namespace-url"]
              properties:
                namespace-name:
                  type: string
                namespace-url:
                  type: string
                icon:
                  type: string
                  format: binary
                  description: Icon image file (optional)
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Namespace updated successfully
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteNamespace
      summary: Delete namespace
      responses:
        '204':
          description: Namespace deleted successfully

  # Namespace Account Operations
  /namespaces/{namespaceId}/accounts:
    parameters:
      - name: namespaceId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getNamespaceAccounts
      summary: Get namespace accounts
      responses:
        '200':
          description: List of namespace accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

    post:
      operationId: createNamespaceAccount
      summary: Create namespace account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["namespace-account-name"]
              properties:
                namespace-account-name:
                  type: string
                namespace-account-url-override:
                  type: string
                namespace-account-header:
                  type: array
                  items:
                    type: object
                variables:
                  type: array
                  items:
                    type: object
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object

  /accounts/{accountId}:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getNamespaceAccountById
      summary: Get namespace account by ID
      responses:
        '200':
          description: Account retrieved successfully
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      operationId: updateNamespaceAccount
      summary: Update namespace account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["namespace-account-name"]
              properties:
                namespace-account-name:
                  type: string
                namespace-account-url-override:
                  type: string
                namespace-account-header:
                  type: array
                  items:
                    type: object
                variables:
                  type: array
                  items:
                    type: object
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteNamespaceAccount
      summary: Delete namespace account
      responses:
        '204':
          description: Account deleted successfully

  # Namespace Method Operations
  /namespaces/{namespaceId}/methods:
    parameters:
      - name: namespaceId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getNamespaceMethods
      summary: Get namespace methods
      responses:
        '200':
          description: List of namespace methods
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

    post:
      operationId: createNamespaceMethod
      summary: Create namespace method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["namespace-method-name", "namespace-method-type"]
              properties:
                namespace-method-name:
                  type: string
                namespace-method-type:
                  type: string
                namespace-method-url-override:
                  type: string
                namespace-method-queryParams:
                  type: array
                  items:
                    type: object
                namespace-method-header:
                  type: array
                  items:
                    type: object
                save-data:
                  type: boolean
                isInitialized:
                  type: boolean
                tags:
                  type: array
                  items:
                    type: string
                sample-request:
                  type: object
                sample-response:
                  type: object
                request-schema:
                  type: object
                response-schema:
                  type: object
                schemaId:
                  type: string
                  nullable: true
                  description: Reference to the schema for this namespace or method
                  default: null
      responses:
        '200':
          description: Method created successfully
          content:
            application/json:
              schema:
                type: object

  /methods/{methodId}:
    parameters:
      - name: methodId
        in: path
        required: true
        schema:
          type: string
    get:
      operationId: getNamespaceMethodById
      summary: Get method by ID
      responses:
        '200':
          description: Method retrieved successfully
          content:
            application/json:
              schema:
                type: object
    put:
      operationId: updateNamespaceMethod
      summary: Update namespace method
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["namespace-method-name", "namespace-method-type"]
              properties:
                namespace-method-name:
                  type: string
                namespace-method-type:
                  type: string
                namespace-method-url-override:
                  type: string
                namespace-method-queryParams:
                  type: array
                  items:
                    type: object
                namespace-method-header:
                  type: array
                  items:
                    type: object
                save-data:
                  type: boolean
                isInitialized:
                  type: boolean
                tags:
                  type: array
                  items:
                    type: string
                sample-request:
                  type: object
                sample-response:
                  type: object
                request-schema:
                  type: object
                response-schema:
                  type: object
                schemaId:
                  type: string
                  nullable: true
                  description: Reference to the schema for this namespace or method
                  default: null
                namespace-method-tableName:
                  type: string
                  nullable: true
                  description: Table name for this method
                  default: null
                tableName:
                  type: string
                  nullable: true
                  description: Table name for this method (backward compatibility)
                  default: null
      responses:
        '200':
          description: Method updated successfully
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteNamespaceMethod
      summary: Delete namespace method
      responses:
        '204':
          description: Method deleted successfully

  /table/create:
    post:
      operationId: createTableByName
      summary: Create a DynamoDB table by name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tableName]
              properties:
                tableName:
                  type: string
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tableName:
                    type: string
        '409':
          description: Table already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /table/{tableName}/count:
    get:
      operationId: getTableItemCount
      summary: Get total number of items in a DynamoDB table
      parameters:
        - name: tableName
          in: path
          required: true
          schema:
            type: string
          description: Name of the DynamoDB table
      responses:
        '200':
          description: Successfully retrieved item count
          content:
            application/json:
              schema:
                type: object
                required: ["count"]
                properties:
                  count:
                    type: integer
                    description: Total number of items in the table
                  tableName:
                    type: string
                    description: Name of the table
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

# Webhook Operations
  /webhooks:
    get:
      operationId: listWebhooks
      summary: List all webhooks
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    webhook-id:
                      type: string
                    webhook-name:
                      type: string
                    pre-exec-url:
                      type: string
                    post-exec-url:
                      type: string
                    method-id:
                      type: string
                      nullable: true
                    namespace-id:
                      type: string
                      nullable: true
                    account-id:
                      type: string
                      nullable: true
                    table-name:
                      type: string
                    status:
                      type: string
                      enum: ['active', 'inactive']
                    tags:
                      type: array
                      items:
                        type: string
                    created-at:
                      type: string
                    updated-at:
                      type: string

    post:
      operationId: createWebhook
      summary: Create a new webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["webhook-name", "tableName"]
              properties:
                webhook-name:
                  type: string
                  description: Name of the webhook
                pre-exec-url:
                  type: string
                  description: URL to call before main webhook execution
                post-exec-url:
                  type: string
                  description: URL where webhook data will be posted
                method-id:
                  type: string
                  nullable: true
                  description: Associated method ID
                namespace-id:
                  type: string
                  nullable: true
                  description: Associated namespace ID
                account-id:
                  type: string
                  nullable: true
                  description: Associated account ID
                tableName:
                  type: string
                  description: Target table name for webhook data
                status:
                  type: string
                  enum: ['active', 'inactive']
                  default: 'active'
                  description: Webhook status
                tags:
                  type: array
                  items:
                    type: string
                  description: Tags for the webhook
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhook-id:
                    type: string
                  webhook-name:
                    type: string
                  pre-exec-url:
                    type: string
                  post-exec-url:
                    type: string
                  method-id:
                    type: string
                    nullable: true
                  namespace-id:
                    type: string
                    nullable: true
                  account-id:
                    type: string
                    nullable: true
                  table-name:
                    type: string
                  status:
                    type: string
                  tags:
                    type: array
                    items:
                      type: string
                  created-at:
                    type: string
                  updated-at:
                    type: string

  /webhooks/active:
    get:
      operationId: getActiveWebhooks
      summary: Get all active webhooks
      responses:
        '200':
          description: List of active webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /webhooks/{webhookId}:
    parameters:
      - name: webhookId
        in: path
        required: true
        schema:
          type: string
        description: Webhook ID
    get:
      operationId: getWebhookById
      summary: Get webhook by ID
      responses:
        '200':
          description: Webhook retrieved successfully
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    put:
      operationId: updateWebhook
      summary: Update webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhook-name:
                  type: string
                pre-exec-url:
                  type: string
                post-exec-url:
                  type: string
                method-id:
                  type: string
                  nullable: true
                namespace-id:
                  type: string
                  nullable: true
                account-id:
                  type: string
                  nullable: true
                tableName:
                  type: string
                status:
                  type: string
                  enum: ['active', 'inactive']
                tags:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Webhook updated successfully
          content:
            application/json:
              schema:
                type: object

    delete:
      operationId: deleteWebhook
      summary: Delete webhook
      responses:
        '204':
          description: Webhook deleted successfully

  /webhooks/table/{tableName}:
    parameters:
      - name: tableName
        in: path
        required: true
        schema:
          type: string
        description: Table name
    get:
      operationId: getWebhooksByTableName
      summary: Get webhooks by table name
      responses:
        '200':
          description: List of webhooks for the table
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /webhooks/namespace/{namespaceId}:
    parameters:
      - name: namespaceId
        in: path
        required: true
        schema:
          type: string
        description: Namespace ID
    get:
      operationId: getWebhooksByNamespace
      summary: Get webhooks by namespace
      responses:
        '200':
          description: List of webhooks for the namespace
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object

  /webhooks/method/{methodId}:
    parameters:
      - name: methodId
        in: path
        required: true
        schema:
          type: string
        description: Method ID
    get:
      operationId: getWebhooksByMethod
      summary: Get webhooks by method
      responses:
        '200':
          description: List of webhooks for the method
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object 

  # Table Validation
  /validate-table:
    post:
      operationId: validateTable
      summary: Validate if a table exists in DynamoDB
      description: Checks if a table exists in DynamoDB and validates the table name format
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ["tableName"]
              properties:
                tableName:
                  type: string
                  description: The name of the table to validate
                  example: "my-table-name"
      responses:
        '200':
          description: Table validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: Whether the table exists in DynamoDB
                  tableName:
                    type: string
                    description: The validated table name (if exists)
                  error:
                    type: string
                    description: Error message if table doesn't exist or validation fails
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  # Duplication Operations
  /namespaces/{namespaceId}/duplicate:
    parameters:
      - name: namespaceId
        in: path
        required: true
        schema:
          type: string
        description: ID of the namespace to duplicate
    post:
      operationId: duplicateNamespace
      summary: Duplicate a namespace with all its accounts, methods, and schemas
      description: Creates a complete copy of the namespace including all associated accounts, methods, and schemas with new IDs
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: Optional new name for the duplicated namespace. If not provided, will append "(Copy)" to the original name
                  example: "My Namespace Copy"
      responses:
        '201':
          description: Namespace duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  namespace:
                    type: object
                    description: The duplicated namespace data
                  duplicatedAccounts:
                    type: integer
                    description: Number of accounts duplicated
                  duplicatedMethods:
                    type: integer
                    description: Number of methods duplicated
                  duplicatedSchemas:
                    type: integer
                    description: Number of schemas duplicated
                  mapping:
                    type: object
                    description: Mapping of old IDs to new IDs
                    properties:
                      namespaceId:
                        type: string
                      accountIdMap:
                        type: object
                      methodIdMap:
                        type: object
                      schemaIdMap:
                        type: object
        '404':
          description: Namespace not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /accounts/{accountId}/duplicate:
    parameters:
      - name: accountId
        in: path
        required: true
        schema:
          type: string
        description: ID of the account to duplicate
    post:
      operationId: duplicateAccount
      summary: Duplicate an account within the same namespace
      description: Creates a copy of the account with a new ID, keeping it in the same namespace
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: Optional new name for the duplicated account. If not provided, will append "(Copy)" to the original name
                  example: "Production Account Copy"
      responses:
        '201':
          description: Account duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  account:
                    type: object
                    description: The duplicated account data
                  accountId:
                    type: string
                    description: ID of the new duplicated account
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /methods/{methodId}/duplicate:
    parameters:
      - name: methodId
        in: path
        required: true
        schema:
          type: string
        description: ID of the method to duplicate
    post:
      operationId: duplicateMethod
      summary: Duplicate a method within the same namespace
      description: Creates a copy of the method with a new ID, keeping it in the same namespace
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: Optional new name for the duplicated method. If not provided, will append "(Copy)" to the original name
                  example: "GET /users/list Copy"
      responses:
        '201':
          description: Method duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  method:
                    type: object
                    description: The duplicated method data
                  methodId:
                    type: string
                    description: ID of the new duplicated method
        '404':
          description: Method not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /schema/{schemaId}/duplicate:
    parameters:
      - name: schemaId
        in: path
        required: true
        schema:
          type: string
        description: ID of the schema to duplicate
    post:
      operationId: duplicateSchema
      summary: Duplicate a schema within the same namespace
      description: Creates a copy of the schema with a new ID, keeping it in the same namespace and updating the namespace's schemaIds array
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                newName:
                  type: string
                  description: Optional new name for the duplicated schema. If not provided, will append "(Copy)" to the original name
                  example: "User Schema Copy"
      responses:
        '201':
          description: Schema duplicated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  schema:
                    type: object
                    description: The duplicated schema data
                  schemaId:
                    type: string
                    description: ID of the new duplicated schema
        '404':
          description: Schema not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string